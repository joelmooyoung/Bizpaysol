version: '3.8'

# Production-ready Docker Compose configuration
# Optimized for cloud deployment with scalability and monitoring

services:
  # Load Balancer / Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/cache:/var/cache/nginx
    depends_on:
      - backend
    networks:
      - ach_network
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'

  # Backend API (multiple replicas for high availability)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    environment:
      NODE_ENV: production
      PORT: 3001
      # Database connection
      DATABASE_URL: ${DATABASE_URL}
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      # Redis connection
      REDIS_URL: ${REDIS_URL}
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRE: ${JWT_EXPIRE:-24h}
      # Encryption key
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      # ACH Configuration
      ACH_IMMEDIATE_DESTINATION: ${ACH_IMMEDIATE_DESTINATION}
      ACH_IMMEDIATE_ORIGIN: ${ACH_IMMEDIATE_ORIGIN}
      ACH_COMPANY_NAME: ${ACH_COMPANY_NAME}
      ACH_COMPANY_ID: ${ACH_COMPANY_ID}
      # SFTP Configuration
      SFTP_HOST: ${SFTP_HOST}
      SFTP_PORT: ${SFTP_PORT:-22}
      SFTP_USERNAME: ${SFTP_USERNAME}
      SFTP_PASSWORD: ${SFTP_PASSWORD}
      # Frontend URL for CORS
      FRONTEND_URL: ${FRONTEND_URL}
      # Monitoring
      ENABLE_METRICS: true
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - logs_data:/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - ach_network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 256mb 
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 30
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - ach_network
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 256M
          cpus: '0.1'
        reservations:
          memory: 128M
          cpus: '0.05'

  # Monitoring and metrics collection
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - ach_network
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
        reservations:
          memory: 256M
          cpus: '0.15'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_DISABLE_GRAVATAR: true
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - ach_network
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Log aggregation
  fluentd:
    image: fluent/fluentd:v1.16-1
    volumes:
      - ./logging/fluentd.conf:/fluentd/etc/fluent.conf:ro
      - logs_data:/app/logs:ro
    ports:
      - "24224:24224"
    networks:
      - ach_network
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  logs_data:
    driver: local

networks:
  ach_network:
    driver: overlay
    attachable: true

# Health check for the entire stack
x-healthcheck-common: &healthcheck-common
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 60s